{"version":3,"sources":["serviceWorker.ts","components/InputRow.tsx","pages/register.tsx","pages/login.tsx","pages/index.tsx","index.tsx","images/indexBackground.jpg"],"names":["Boolean","window","location","hostname","match","InputRow","label","placeholder","required","type","onChange","className","TextField","Register","useState","username","setUsername","email","setEmail","password","setPassword","confirmedPassword","setConfirmedPassword","msgType","setMsgType","msgContent","setMsgContent","submitData","event","a","preventDefault","axios","post","process","data","console","log","content","map","msgBox","onSubmit","target","value","Button","variant","color","Login","Index","setType","style","backgroundImage","require","ButtonGroup","aria-label","onClick","renderPage","Link","ReactDOM","render","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.51b508ba.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { TextField } from \"@material-ui/core\";\nimport \"../styles/app.css\";\nconst InputRow: React.FC<{\n  label: string;\n  placeholder: string;\n  required: boolean;\n  type: string;\n  onChange: (event: any) => void;\n}> = ({\n  label = \"\",\n  placeholder = \"\",\n  required = false,\n  type = \"\",\n  onChange,\n}) => {\n  //console.log(\"renderInputRow\");\n  return (\n    <div className=\"mt-4 flex flex-col\">\n      <TextField\n        className=\"mt-4\"\n        label={label}\n        onChange={onChange}\n        placeholder={placeholder}\n        required\n        type={type}\n      />\n    </div>\n  );\n};\n\nexport default InputRow;\n","import React, { memo, useState, useEffect } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport InputRow from \"../components/InputRow\";\nimport axios from \"axios\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nconst Register: React.FC<{}> = ({}) => {\n  const [username, setUsername] = useState<string>(\"\");\n  const [email, setEmail] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const [confirmedPassword, setConfirmedPassword] = useState<string>(\"\");\n  const [msgType, setMsgType] = useState<number>(0);\n  const [msgContent, setMsgContent] = useState<string[]>([]);\n  const submitData: (event: any) => void = async (event) => {\n    event.preventDefault();\n\n    const { data } = await axios.post(\n      `${process.env.REACT_APP_API_URL}/register`,\n      {\n        username: username,\n        email: email,\n        password: password,\n        confirmedPassword: confirmedPassword,\n      }\n    );\n    console.log(data);\n    setMsgContent(data.content);\n    setMsgType(data.type);\n  };\n\n  const msgBox: React.FC<{ content: string }> = (content) => {\n    switch (msgType) {\n      case 0:\n        return <div className=\"h-12\" />;\n      case 1:\n        return (\n          <div className=\"w-full bg-green-500 flex items-center flex-row px-4 py-2\">\n            <CheckCircleIcon className=\" text-white\" />\n            <span className=\"text-white mx-2 text-xl\">{content.content}</span>\n          </div>\n        );\n      case 2:\n        return (\n          <div className=\"w-full  bg-red-600 flex items-center flex-row px-4 py-2\">\n            <ErrorIcon className=\" text-white\" />\n            <span className=\"text-white mx-2 text-xl\">{content.content}</span>\n          </div>\n        );\n      default:\n        return <div className=\"h-12\" />;\n    }\n  };\n  return (\n    <div>\n      {msgContent.map((content) => {\n        return msgBox({ content });\n      })}\n      <form className=\"mx-24\" onSubmit={submitData}>\n        <span className=\"text-5xl font-bold\">Register</span>\n        <InputRow\n          label=\"Username\"\n          placeholder=\"Enter your username\"\n          required\n          type=\"\"\n          onChange={(event: any) => {\n            setUsername(event.target.value);\n          }}\n        />\n        <InputRow\n          label=\"Email\"\n          placeholder=\"Enter your email address\"\n          required\n          type=\"email\"\n          onChange={(event: any) => {\n            setEmail(event.target.value);\n          }}\n        />\n        <InputRow\n          label=\"Password\"\n          placeholder=\"Enter your password\"\n          type=\"password\"\n          onChange={(event: any) => {\n            setPassword(event.target.value);\n          }}\n          required\n        />\n        <InputRow\n          label=\"Confirmed Password\"\n          placeholder=\"Enter your password again\"\n          type=\"password\"\n          onChange={(event: any) => {\n            setConfirmedPassword(event.target.value);\n          }}\n          required\n        />\n        <div className=\"mt-8 flex items-center justify-center\">\n          <Button\n            variant=\"contained\"\n            className=\"h-20 w-64\"\n            type=\"submit\"\n            color=\"secondary\"\n          >\n            Sign Up\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default Register;\n","import React, { useState, useEffect } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport InputRow from \"../components/InputRow\";\nimport axios from \"axios\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nconst Login: React.FC<{}> = ({}) => {\n  const [username, setUsername] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const [msgType, setMsgType] = useState<number>(0);\n  const [msgContent, setMsgContent] = useState<string[]>([]);\n  const msgBox: React.FC<{ content: string }> = (content) => {\n    switch (msgType) {\n      case 0:\n        return <div className=\"h-12\" />;\n      case 1:\n        return (\n          <div className=\"w-full bg-green-500 flex items-center flex-row px-4 py-2\">\n            <CheckCircleIcon className=\" text-white\" />\n            <span className=\"text-white mx-2 text-xl\">{content.content}</span>\n          </div>\n        );\n      case 2:\n        return (\n          <div className=\"w-full  bg-red-600 flex items-center flex-row px-4 py-2\">\n            <ErrorIcon className=\" text-white\" />\n            <span className=\"text-white mx-2 text-xl\">{content.content}</span>\n          </div>\n        );\n      default:\n        return <div className=\"h-12\" />;\n    }\n  };\n  const submitData: (event: any) => void = async (event) => {\n    event.preventDefault();\n\n    const { data } = await axios.post(\n      `${process.env.REACT_APP_API_URL}/login`,\n      {\n        username: username,\n        password: password,\n      }\n    );\n    console.log(data);\n    setMsgContent(data.content);\n    setMsgType(data.type);\n  };\n  return (\n    <div>\n      {msgContent.map((content) => {\n        return msgBox({ content });\n      })}\n      <form className=\"mx-24\" onSubmit={submitData}>\n        <span className=\"text-5xl font-bold\">Login</span>\n        <InputRow\n          label=\"Username\"\n          placeholder=\"Enter your username\"\n          required\n          type=\"\"\n          onChange={(event: any) => {\n            setUsername(event.target.value);\n          }}\n        />\n        <InputRow\n          label=\"Password\"\n          placeholder=\"Enter your password\"\n          type=\"password\"\n          onChange={(event: any) => {\n            setPassword(event.target.value);\n          }}\n          required\n        />\n        <div className=\"mt-8 flex items-center justify-center\">\n          <Button\n            variant=\"contained\"\n            className=\"h-20 w-64\"\n            type=\"submit\"\n            color=\"secondary\"\n          >\n            Sign In\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default Login;\n","import React, { useState, useCallback } from \"react\";\nimport \"../styles/app.css\";\nimport { ButtonGroup, Button, Link } from \"@material-ui/core\";\nimport Register from \"./register\";\nimport Login from \"./login\";\nconst Index = () => {\n  const [type, setType] = useState<string>(\"register\");\n  const renderPage: React.FC<{}> = () => {\n    switch (type) {\n      case \"register\":\n        return <Register />;\n      case \"login\":\n        return <Login />;\n      default:\n        return <Register />;\n    }\n  };\n  console.log(process.env);\n  return (\n    <div className=\"h-screen grid grid-flow-row grid-cols-2 grid-rows-6\">\n      <div\n        className=\"col-span-1 row-span-6 flex items-center justify-center\"\n        style={{\n          backgroundImage: `url(${require(\"../images/indexBackground.jpg\")})`,\n        }}\n      >\n        <span className=\"text-6xl font-bold text-gray-400\">Get Started</span>\n      </div>\n      <div className=\"row-span-1  col-span-1 flex items-start justify-end\">\n        <ButtonGroup\n          color=\"primary\"\n          aria-label=\"outlined primary button group\"\n          className=\"mt-4 mx-4\"\n        >\n          <Button\n            className=\"w-40 h-16 \"\n            onClick={() => {\n              setType(\"register\");\n            }}\n            variant={type == \"register\" ? \"contained\" : \"outlined\"}\n          >\n            Register\n          </Button>\n          <Button\n            className=\"w-40 h-16 \"\n            onClick={() => {\n              setType(\"login\");\n            }}\n            variant={type == \"login\" ? \"contained\" : \"outlined\"}\n          >\n            Login\n          </Button>\n        </ButtonGroup>\n      </div>\n      <div className=\"row-span-4 col-span-1\">{renderPage({})}</div>\n      <div className=\"row-span-1 col-span-1 flex items-center justify-center\">\n        <Link className=\"text-2xl font-bold text-blue-700\">\n          Forgot Password?\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default Index;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Index from \"./pages/index\";\nReactDOM.render(\n  <Router>\n    <div>\n      <Switch>\n        <Route path=\"/\" component={Index} />\n      </Switch>\n    </div>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/indexBackground.5c7d06a7.jpg\";"],"sourceRoot":""}